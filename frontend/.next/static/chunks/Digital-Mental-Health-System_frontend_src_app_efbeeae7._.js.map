{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dell/Digital-Mental-Health-System/frontend/src/app/components/StressMeter.jsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport GaugeChart from \"react-gauge-chart\";\r\n\r\nexport default function StressMeter({ userId }) {\r\n  const [level, setLevel] = useState(0.5); // target slider\r\n  const [displayLevel, setDisplayLevel] = useState(0.5); // animated needle\r\n  const [saving, setSaving] = useState(false);\r\n  const [emoji, setEmoji] = useState(\"üòê\");\r\n  const router = useRouter();\r\n  const animationRef = useRef();\r\n\r\n  // Animate needle\r\n  useEffect(() => {\r\n    const animate = () => {\r\n      setDisplayLevel((prev) => {\r\n        const diff = level - prev;\r\n        if (Math.abs(diff) < 0.001) return level;\r\n        return prev + diff * 0.1;\r\n      });\r\n      animationRef.current = requestAnimationFrame(animate);\r\n    };\r\n    animationRef.current = requestAnimationFrame(animate);\r\n    return () => cancelAnimationFrame(animationRef.current);\r\n  }, [level]);\r\n\r\n  // Update emoji\r\n  useEffect(() => {\r\n    if (displayLevel < 0.33) setEmoji(\"üòä\");\r\n    else if (displayLevel < 0.66) setEmoji(\"üòê\");\r\n    else setEmoji(\"üò¢\");\r\n  }, [displayLevel]);\r\n\r\n  // Background color based on stress\r\n  const bgColor = () => {\r\n    if (displayLevel < 0.33) return \"bg-green-200\";\r\n    else if (displayLevel < 0.66) return \"bg-yellow-200\";\r\n    else return \"bg-red-200\";\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      setSaving(true);\r\n      const stressLevel = Math.round(level * 10);\r\n      await axios.post(\"http://localhost:4000/api/stress\", { userId, stressLevel });\r\n      alert(\"Stress level logged successfully ‚úÖ\");\r\n      router.push(\"/student/dashboard\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"Error saving stress level ‚ùå\");\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`flex flex-col items-center justify-center w-full max-w-md rounded-xl p-8 space-y-6 transition-colors duration-500 ${bgColor()}`}>\r\n      <h1 className=\"text-3xl font-bold text-gray-800 text-center\">\r\n        Daily Stress Meter\r\n      </h1>\r\n\r\n      {/* Emoji Feedback */}\r\n      <div className=\"text-6xl animate-bounce\">{emoji}</div>\r\n\r\n      {/* Gauge Chart */}\r\n      <GaugeChart\r\n        id=\"animated-gauge\"\r\n        nrOfLevels={20}\r\n        colors={[\r\n          \"#00FF00\", \"#33FF00\", \"#66FF00\", \"#99FF00\",\r\n          \"#CCFF00\", \"#FFFF00\", \"#FFCC00\", \"#FF9900\",\r\n          \"#FF6600\", \"#FF3300\", \"#FF0000\"\r\n        ]}\r\n        percent={displayLevel}\r\n        arcPadding={0.02}\r\n        needleColor=\"#333333\"\r\n        needleBaseColor=\"#333333\"\r\n        animate={false}\r\n        textColor=\"#000\"\r\n        formatTextValue={() => `${Math.round(displayLevel * 10)} / 10`}\r\n      />\r\n\r\n      {/* Slider */}\r\n      <input\r\n        type=\"range\"\r\n        min={0}\r\n        max={1}\r\n        step={0.01}\r\n        value={level}\r\n        onChange={(e) => setLevel(parseFloat(e.target.value))}\r\n        className=\"w-full h-2 bg-gray-300 rounded-lg accent-indigo-600\"\r\n      />\r\n\r\n      <p className=\"text-lg font-semibold\">\r\n        Selected Level: {Math.round(level * 10)} / 10\r\n      </p>\r\n\r\n      <button\r\n        onClick={handleSave}\r\n        disabled={saving}\r\n        className=\"w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-4 rounded-xl shadow-lg disabled:opacity-50 transition-transform transform hover:scale-105\"\r\n      >\r\n        {saving ? \"Saving...\" : \"Submit Stress Level\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;;;AALA;;;;;AAOe,SAAS,YAAY,KAAU;QAAV,EAAE,MAAM,EAAE,GAAV;;IAClC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,8NAAQ,EAAC,MAAM,gBAAgB;IACzD,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,8NAAQ,EAAC,MAAM,kBAAkB;IACzE,MAAM,CAAC,QAAQ,UAAU,GAAG,IAAA,8NAAQ,EAAC;IACrC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,8NAAQ,EAAC;IACnC,MAAM,SAAS,IAAA,uMAAS;IACxB,MAAM,eAAe,IAAA,4NAAM;IAE3B,iBAAiB;IACjB,IAAA,+NAAS;iCAAC;YACR,MAAM;iDAAU;oBACd;yDAAgB,CAAC;4BACf,MAAM,OAAO,QAAQ;4BACrB,IAAI,KAAK,GAAG,CAAC,QAAQ,OAAO,OAAO;4BACnC,OAAO,OAAO,OAAO;wBACvB;;oBACA,aAAa,OAAO,GAAG,sBAAsB;gBAC/C;;YACA,aAAa,OAAO,GAAG,sBAAsB;YAC7C;yCAAO,IAAM,qBAAqB,aAAa,OAAO;;QACxD;gCAAG;QAAC;KAAM;IAEV,eAAe;IACf,IAAA,+NAAS;iCAAC;YACR,IAAI,eAAe,MAAM,SAAS;iBAC7B,IAAI,eAAe,MAAM,SAAS;iBAClC,SAAS;QAChB;gCAAG;QAAC;KAAa;IAEjB,mCAAmC;IACnC,MAAM,UAAU;QACd,IAAI,eAAe,MAAM,OAAO;aAC3B,IAAI,eAAe,MAAM,OAAO;aAChC,OAAO;IACd;IAEA,MAAM,aAAa;QACjB,IAAI;YACF,UAAU;YACV,MAAM,cAAc,KAAK,KAAK,CAAC,QAAQ;YACvC,MAAM,wMAAK,CAAC,IAAI,CAAC,oCAAoC;gBAAE;gBAAQ;YAAY;YAC3E,MAAM;YACN,OAAO,IAAI,CAAC;QACd,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC;YACd,MAAM;QACR,SAAU;YACR,UAAU;QACZ;IACF;IAEA,qBACE,kPAAC;QAAI,WAAW,AAAC,qHAA8H,OAAV;;0BACnI,kPAAC;gBAAG,WAAU;0BAA+C;;;;;;0BAK7D,kPAAC;gBAAI,WAAU;0BAA2B;;;;;;0BAG1C,kPAAC,2NAAU;gBACT,IAAG;gBACH,YAAY;gBACZ,QAAQ;oBACN;oBAAW;oBAAW;oBAAW;oBACjC;oBAAW;oBAAW;oBAAW;oBACjC;oBAAW;oBAAW;iBACvB;gBACD,SAAS;gBACT,YAAY;gBACZ,aAAY;gBACZ,iBAAgB;gBAChB,SAAS;gBACT,WAAU;gBACV,iBAAiB,IAAM,AAAC,GAAgC,OAA9B,KAAK,KAAK,CAAC,eAAe,KAAI;;;;;;0BAI1D,kPAAC;gBACC,MAAK;gBACL,KAAK;gBACL,KAAK;gBACL,MAAM;gBACN,OAAO;gBACP,UAAU,CAAC,IAAM,SAAS,WAAW,EAAE,MAAM,CAAC,KAAK;gBACnD,WAAU;;;;;;0BAGZ,kPAAC;gBAAE,WAAU;;oBAAwB;oBAClB,KAAK,KAAK,CAAC,QAAQ;oBAAI;;;;;;;0BAG1C,kPAAC;gBACC,SAAS;gBACT,UAAU;gBACV,WAAU;0BAET,SAAS,cAAc;;;;;;;;;;;;AAIhC;GAtGwB;;QAKP,uMAAS;;;KALF","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dell/Digital-Mental-Health-System/frontend/src/app/components/Quotes.jsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst quoteList = [\r\n  \"Keep going, you're doing great!\",\r\n  \"Breathe in, breathe out, and relax.\",\r\n  \"Every day is a fresh start.\",\r\n  \"Your feelings are valid.\",\r\n  \"Small steps lead to big changes.\",\r\n  \"You are stronger than you think.\",\r\n  \"Take a deep breath and smile.\"\r\n];\r\n\r\nexport default function Quotes() {\r\n  const [quote, setQuote] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setQuote(quoteList[Math.floor(Math.random() * quoteList.length)]);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"text-center max-w-lg\">\r\n      <h1 className=\"text-3xl font-bold mb-6\">Daily Inspiration</h1>\r\n      <p className=\"text-xl italic leading-relaxed\">{quote}</p>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;;;AAFA;;AAIA,MAAM,YAAY;IAChB;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEc,SAAS;;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,8NAAQ,EAAC;IAEnC,IAAA,+NAAS;4BAAC;YACR,SAAS,SAAS,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,UAAU,MAAM,EAAE;QAClE;2BAAG,EAAE;IAEL,qBACE,kPAAC;QAAI,WAAU;;0BACb,kPAAC;gBAAG,WAAU;0BAA0B;;;;;;0BACxC,kPAAC;gBAAE,WAAU;0BAAkC;;;;;;;;;;;;AAGrD;GAbwB;KAAA","debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dell/Digital-Mental-Health-System/frontend/src/app/student/dashboard/page.jsx"],"sourcesContent":["\"use client\";\r\n\r\nimport AnimatedStressMeter from \"../../components/StressMeter\";\r\nimport Quotes from \"../../components/Quotes\";\r\n\r\nexport default function StressMeterPage() {\r\n  const userId = \"demo_user_123\"; // Replace with Firebase UID or email\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col lg:flex-row\">\r\n      {/* Left Side - Quotes */}\r\n      <div className=\"lg:w-1/2 bg-gradient-to-br from-purple-400 to-indigo-600 flex items-center justify-center p-8 text-white\">\r\n        <Quotes />\r\n      </div>\r\n\r\n      {/* Right Side - Animated Stress Meter */}\r\n      <div className=\"lg:w-1/2 bg-gray-100 flex items-center justify-center p-8\">\r\n        <AnimatedStressMeter userId={userId} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAKe,SAAS;IACtB,MAAM,SAAS,iBAAiB,qCAAqC;IAErE,qBACE,kPAAC;QAAI,WAAU;;0BAEb,kPAAC;gBAAI,WAAU;0BACb,cAAA,kPAAC,sMAAM;;;;;;;;;;0BAIT,kPAAC;gBAAI,WAAU;0BACb,cAAA,kPAAC,2MAAmB;oBAAC,QAAQ;;;;;;;;;;;;;;;;;AAIrC;KAhBwB","debugId":null}}]
}