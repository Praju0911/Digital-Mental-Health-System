{"version":3,"sources":["turbopack:///[project]/Digital-Mental-Health-System/frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts","turbopack:///[project]/Digital-Mental-Health-System/frontend/node_modules/next/src/server/route-modules/app-page/vendored/contexts/app-router-context.ts","turbopack:///[project]/Digital-Mental-Health-System/frontend/node_modules/next/src/server/route-modules/app-page/vendored/contexts/hooks-client-context.ts","turbopack:///[project]/Digital-Mental-Health-System/frontend/node_modules/next/src/server/route-modules/app-page/vendored/contexts/server-inserted-html.ts","turbopack:///[project]/Digital-Mental-Health-System/frontend/node_modules/next/src/server/route-modules/app-page/module.compiled.js","turbopack:///[project]/Digital-Mental-Health-System/frontend/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.ts","turbopack:///[project]/Digital-Mental-Health-System/frontend/src/app/components/StressMeter.jsx","turbopack:///[project]/Digital-Mental-Health-System/frontend/src/app/components/Quotes.jsx","turbopack:///[project]/Digital-Mental-Health-System/frontend/src/app/student/dashboard/page.jsx"],"sourcesContent":["module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.React\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['contexts'].AppRouterContext\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['contexts'].HooksClientContext\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['contexts'].ServerInsertedHtml\n","if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactJsxRuntime\n","\"use client\";\r\n\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { useRouter, useSearchParams } from \"next/navigation\";\r\nimport GaugeChart from \"react-gauge-chart\";\r\nimport { db, auth } from \"@/lib/firebase\";\r\nimport { doc, setDoc, addDoc, collection, getDoc } from \"firebase/firestore\";\r\n\r\nexport default function StressMeter() {\r\n  const searchParams = useSearchParams();\r\n  const userId = searchParams.get(\"uid\") || auth.currentUser?.uid; // get UID from query or current user\r\n  const [level, setLevel] = useState(0.5); // slider target\r\n  const [displayLevel, setDisplayLevel] = useState(0.5); // animated needle\r\n  const [saving, setSaving] = useState(false);\r\n  const [emoji, setEmoji] = useState(\"üòê\");\r\n  const router = useRouter();\r\n  const animationRef = useRef();\r\n\r\n  // Load previous stress level from Firestore\r\n  useEffect(() => {\r\n    if (!userId) return;\r\n\r\n    const loadStress = async () => {\r\n      try {\r\n        const docRef = doc(db, \"stressLevels\", userId);\r\n        const docSnap = await getDoc(docRef);\r\n        if (docSnap.exists()) {\r\n          const savedLevel = docSnap.data().stressLevel / 10; // scale 0-1\r\n          setLevel(savedLevel);\r\n          setDisplayLevel(savedLevel);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error loading stress level:\", err);\r\n      }\r\n    };\r\n\r\n    loadStress();\r\n  }, [userId]);\r\n\r\n  // Animate needle smoothly\r\n  useEffect(() => {\r\n    const animate = () => {\r\n      setDisplayLevel((prev) => {\r\n        const diff = level - prev;\r\n        if (Math.abs(diff) < 0.001) return level;\r\n        return prev + diff * 0.1;\r\n      });\r\n      animationRef.current = requestAnimationFrame(animate);\r\n    };\r\n    animationRef.current = requestAnimationFrame(animate);\r\n    return () => cancelAnimationFrame(animationRef.current);\r\n  }, [level]);\r\n\r\n  // Update emoji dynamically\r\n  useEffect(() => {\r\n    if (displayLevel < 0.33) setEmoji(\"üòä\");\r\n    else if (displayLevel < 0.66) setEmoji(\"üòê\");\r\n    else setEmoji(\"üò¢\");\r\n  }, [displayLevel]);\r\n\r\n  // Dynamic background based on stress level\r\n  const bgColor = () => {\r\n    if (displayLevel < 0.33) return \"bg-green-200\";\r\n    else if (displayLevel < 0.66) return \"bg-yellow-200\";\r\n    else return \"bg-red-200\";\r\n  };\r\n\r\n  // Save stress level to Firestore\r\n  const handleSave = async () => {\r\n    if (!userId) {\r\n      alert(\"User not found! Please login.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setSaving(true);\r\n      const stressLevel = Math.round(level * 10); // scale 0-10\r\n\r\n      // Save in stressLevels collection\r\n      await setDoc(doc(db, \"stressLevels\", userId), {\r\n        stressLevel,\r\n        updatedAt: new Date(),\r\n        email: auth.currentUser?.email || \"unknown\",\r\n      });\r\n\r\n      // Save in moodEntries collection (historical data)\r\n      await addDoc(collection(db, \"moodEntries\"), {\r\n        uid: userId,\r\n        email: auth.currentUser?.email || \"unknown\",\r\n        stressLevel,\r\n        timestamp: new Date(),\r\n      });\r\n\r\n      alert(\"Stress level saved successfully ‚úÖ\");\r\n      router.push(\"/student/dashboard\");\r\n    } catch (err) {\r\n      console.error(\"Error saving stress level:\", err);\r\n      alert(\"Error saving stress level ‚ùå\");\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`flex flex-col items-center justify-center w-full max-w-md rounded-xl p-8 space-y-6 transition-colors duration-500 ${bgColor()}`}\r\n    >\r\n      <h1 className=\"text-3xl font-bold text-gray-800 text-center\">\r\n        Daily Stress Meter\r\n      </h1>\r\n\r\n      {/* Emoji Feedback */}\r\n      <div className=\"text-6xl animate-bounce\">{emoji}</div>\r\n\r\n      {/* Gauge Chart */}\r\n      <GaugeChart\r\n        id=\"animated-gauge\"\r\n        nrOfLevels={20}\r\n        colors={[\r\n          \"#00FF00\", \"#33FF00\", \"#66FF00\", \"#99FF00\",\r\n          \"#CCFF00\", \"#FFFF00\", \"#FFCC00\", \"#FF9900\",\r\n          \"#FF6600\", \"#FF3300\", \"#FF0000\"\r\n        ]}\r\n        percent={displayLevel}\r\n        arcPadding={0.02}\r\n        needleColor=\"#333333\"\r\n        needleBaseColor=\"#333333\"\r\n        animate={false}\r\n        textColor=\"#000\"\r\n        formatTextValue={() => `${Math.round(displayLevel * 10)} / 10`}\r\n      />\r\n\r\n      {/* Slider */}\r\n      <input\r\n        type=\"range\"\r\n        min={0}\r\n        max={1}\r\n        step={0.01}\r\n        value={level}\r\n        onChange={(e) => setLevel(parseFloat(e.target.value))}\r\n        className=\"w-full h-2 bg-gray-300 rounded-lg accent-indigo-600\"\r\n      />\r\n\r\n      <p className=\"text-lg font-semibold\">\r\n        Selected Level: {Math.round(level * 10)} / 10\r\n      </p>\r\n\r\n      <button\r\n        onClick={handleSave}\r\n        disabled={saving}\r\n        className=\"w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-4 rounded-xl shadow-lg disabled:opacity-50 transition-transform transform hover:scale-105\"\r\n      >\r\n        {saving ? \"Saving...\" : \"Submit Stress Level\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst quoteList = [\r\n  \"Keep going, you're doing great!\",\r\n  \"Breathe in, breathe out, and relax.\",\r\n  \"Every day is a fresh start.\",\r\n  \"Your feelings are valid.\",\r\n  \"Small steps lead to big changes.\",\r\n  \"You are stronger than you think.\",\r\n  \"Take a deep breath and smile.\"\r\n];\r\n\r\nexport default function Quotes() {\r\n  const [quote, setQuote] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setQuote(quoteList[Math.floor(Math.random() * quoteList.length)]);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"text-center max-w-lg\">\r\n      <h1 className=\"text-3xl font-bold mb-6\">Daily Inspiration</h1>\r\n      <p className=\"text-xl italic leading-relaxed\">{quote}</p>\r\n    </div>\r\n  );\r\n}\r\n","\"use client\";\r\n\r\nimport AnimatedStressMeter from \"../../components/StressMeter\";\r\nimport Quotes from \"../../components/Quotes\";\r\n\r\nexport default function StressMeterPage() {\r\n  const userId = \"demo_user_123\"; // Replace with Firebase UID or email\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col lg:flex-row\">\r\n      {/* Left Side - Quotes */}\r\n      <div className=\"lg:w-1/2 bg-gradient-to-br from-purple-400 to-indigo-600 flex items-center justify-center p-8 text-white\">\r\n        <Quotes />\r\n      </div>\r\n\r\n      {/* Right Side - Animated Stress Meter */}\r\n      <div className=\"lg:w-1/2 bg-gray-100 flex items-center justify-center p-8\">\r\n        <AnimatedStressMeter userId={userId} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["module","exports","require","vendored","React","AppRouterContext","HooksClientContext","ServerInsertedHtml","process","env","NEXT_RUNTIME","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK","ReactJsxRuntime"],"mappings":"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","ignoreList":[0,1,2,3,4,5]}